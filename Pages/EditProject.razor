@page "/projects/edit/{Id:int}"
@inject IProjectService ProjectService
@inject IWebHostEnvironment Env
@inject NavigationManager Nav
@inject IJSRuntime JS
@using PortfolioCMS.Models
@using PortfolioCMS.Services

<EditForm Model="@project" OnValidSubmit="SaveChanges">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="project.Title" class="form-control mb-2" placeholder="Title" />
    <InputTextArea @bind-Value="project.Description" class="form-control mb-2" rows="4" placeholder="Description" />
    <InputText @bind-Value="project.RepoLink" class="form-control mb-2" placeholder="Repo Link" />

    <select @bind="project.CategoryId" class="form-select mb-3">
        <option value="">Select Category</option>
        @foreach (var cat in categories)
        {
            <option value="@cat.Id">@cat.Name</option>
        }
    </select>

    <h5>Tags:</h5>
    <div class="row mb-3">
        @foreach (var tag in allTags)
        {
            <div class="col-md-3 mb-2">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="tag_@tag.Id" @bind="tag.IsSelected" />
                    <label class="form-check-label" for="tag_@tag.Id">@tag.Name</label>
                </div>
            </div>
        }
    </div>

    <h5 class="mt-3">Current Images</h5>
    <div class="d-flex flex-wrap gap-2 mb-2">
        @foreach (var image in project.Images)
        {
            <img src="@("/" + image.Path)" class="img-thumbnail" style="max-height: 150px;" />
        }
    </div>

    <h5 class="mt-3">Add New Images</h5>
    <div id="edit-drop-zone" class="drop-zone mt-2">
        <label for="editFileInput" class="btn btn-outline-primary">📁 Choose Files</label>
        <InputFile id="editFileInput" OnChange="OnImageSelected" multiple class="d-none" />
        <p class="mt-2 text-muted">or drag and drop files here</p>
    </div>

    <div class="d-flex flex-wrap gap-2 mt-2">
        @foreach (var preview in newImagePreviews)
        {
            <img src="@preview" class="img-thumbnail project-image" style="max-height: 150px;" />
        }
    </div>

    <button class="btn btn-outline-primary mt-3">Update Project</button>

</EditForm>

@code {
    [Parameter] public int Id { get; set; }

    private Project project = new();
    private List<string> newImagePaths = new();
    private List<string> newImagePreviews = new();
    private List<Category> categories = new();
    private List<Tag> allTags = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await ProjectService.GetAllCategoriesAsync();
        allTags = await ProjectService.GetAllTagsAsync();
        project = await ProjectService.GetProjectAsync(Id) ?? new();

        var selectedTagIds = project.ProjectTags.Select(pt => pt.TagId).ToHashSet();
        foreach (var tag in allTags)
        {
            tag.IsSelected = selectedTagIds.Contains(tag.Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("blazorDrop.initDropZone", "edit-drop-zone", "editFileInput");
        }
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var uploads = Path.Combine(Env.WebRootPath, "images");
            Directory.CreateDirectory(uploads);

            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var path = Path.Combine(uploads, fileName);

            await using var fs = new FileStream(path, FileMode.Create);
            await file.OpenReadStream(10_000_000).CopyToAsync(fs);

            var relativePath = $"images/{fileName}";
            newImagePaths.Add(relativePath);
            newImagePreviews.Add("/" + relativePath);
        }
    }

    private async Task SaveChanges()
    {
        foreach (var path in newImagePaths)
        {
            if (!project.Images.Any(i => i.Path == path))
            {
                project.Images.Add(new ProjectImage { Path = path });
            }
        }

        await ProjectService.UpdateProjectTagsAsync(project.Id, allTags);
        await ProjectService.UpdateProjectMetadataAsync(project);

        Nav.NavigateTo("/projects");
    }
}
