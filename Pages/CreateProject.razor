@page "/projects/create"
@using PortfolioCMS.Models
@using PortfolioCMS.Services
@inject IProjectService ProjectService
@inject IWebHostEnvironment Env
@inject NavigationManager Nav
@inject IJSRuntime JS

<EditForm Model="@project" OnValidSubmit="SaveProject">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText @bind-Value="project.Title" class="form-control mb-2" placeholder="Title" />
    <InputTextArea @bind-Value="project.Description" class="form-control mb-2" rows="4" placeholder="Description" />
    <InputText @bind-Value="project.RepoLink" class="form-control mb-2" placeholder="Repo Link" />

    <!-- Category Dropdown -->
    <select @bind="project.CategoryId" class="form-select mb-3">
        <option value="">Select Category</option>
        @foreach (var cat in categories)
        {
            <option value="@cat.Id">@cat.Name</option>
        }
    </select>

    <!-- Tags Checkboxes -->
    <h5 class="mt-3">Tags:</h5>
    <div class="row mb-3">
        @foreach (var tag in allTags)
        {
            <div class="col-md-3 mb-2">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="tag_@tag.Id" @bind="tag.IsSelected" />
                    <label class="form-check-label" for="tag_@tag.Id">@tag.Name</label>
                </div>
            </div>
        }
    </div>

    <!-- Drag & Drop File Upload -->
    <div id="drop-zone" class="drop-zone mt-3">
        <label for="fileInput" class="btn btn-outline-primary">📁 Choose Files</label>
        <InputFile id="fileInput" OnChange="OnImageSelected" multiple class="d-none" />
        <p class="mt-2 text-muted">or drag and drop files here</p>
    </div>

    <div class="d-flex flex-wrap gap-2 mt-2">
        @foreach (var img in previewImages)
        {
            <img src="@img" class="img-thumbnail project-image" style="max-height: 150px;" />
        }
    </div>

    <button class="btn btn-outline-primary mt-3">Create Project</button>

</EditForm>

@code {
    private Project project = new();
    private List<string> previewImages = new();
    private List<string> uploadedPaths = new();
    private List<Category> categories = new();
    private List<Tag> allTags = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await ProjectService.GetAllCategoriesAsync();
        allTags = await ProjectService.GetAllTagsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("blazorDrop.initDropZone", "drop-zone", "fileInput");
        }
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var uploads = Path.Combine(Env.WebRootPath, "images");
            Directory.CreateDirectory(uploads);

            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var path = Path.Combine(uploads, fileName);

            await using var fs = new FileStream(path, FileMode.Create);
            await file.OpenReadStream(10_000_000).CopyToAsync(fs);

            var relativePath = $"images/{fileName}";
            uploadedPaths.Add(relativePath);
            previewImages.Add($"/{relativePath}");
        }
    }

    private async Task SaveProject()
    {
        project.CreatedAt = DateTime.Now;

        foreach (var path in uploadedPaths)
        {
            project.Images.Add(new ProjectImage { Path = path });
        }

        project.ProjectTags = allTags
            .Where(t => t.IsSelected)
            .Select(t => new ProjectTag { TagId = t.Id, Tag = t })
            .ToList();

        await ProjectService.CreateProjectAsync(project);
        Nav.NavigateTo("/projects");
    }
}
