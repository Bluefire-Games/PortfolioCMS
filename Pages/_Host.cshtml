@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace PortfolioCMS.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css" rel="stylesheet">
    <link href="css/site.css" rel="stylesheet" />
    <link href="PortfolioCMS.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<script>
    window.blazorDrop = {
        initDropZone: function (dropZoneId, inputFileId) {
            const dropZone = document.getElementById(dropZoneId);
            const input = document.getElementById(inputFileId);
            if (!dropZone || !input) return;

            dropZone.addEventListener('dragover', e => {
                e.preventDefault();
                dropZone.classList.add('dragging');
            });

            dropZone.addEventListener('dragleave', () => {
                dropZone.classList.remove('dragging');
            });

            dropZone.addEventListener('drop', e => {
                e.preventDefault();
                dropZone.classList.remove('dragging');

                const dt = new DataTransfer();
                for (const file of e.dataTransfer.files) {
                    dt.items.add(file);
                }
                input.files = dt.files;
                input.dispatchEvent(new Event('change', { bubbles: true }));
            });
        }
    };


    const themeKey = 'theme';
    const darkClass = 'dark-mode';

    function applyInitialTheme() {
        const theme = localStorage.getItem(themeKey);
        if (theme === 'dark') {
            document.body.classList.add(darkClass);
        }
    }

    function toggleTheme() {
        const body = document.body;
        const isDark = body.classList.toggle(darkClass);
        localStorage.setItem(themeKey, isDark ? 'dark' : 'light');
    }

    window.setBodyClass = function (className) {
        document.body.className = className;
    }

    const theme = localStorage.getItem('theme');
    if (theme === 'dark') {
        document.body.classList.add('dark-mode');
    }
</script>


<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
</body>
</html>
