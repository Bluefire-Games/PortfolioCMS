@using PortfolioCMS.Services
@inject AuthService AuthService
@inject NavigationManager Navigation

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">PortfolioCMS</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/projects">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Projects
            </NavLink>
        </div>
        <div class="nav-item px-3">
        <NavLink class="nav-link" href="/login">
            <span class="oi oi-list-rich" aria-hidden="true"></span> Login
        </NavLink>
        </div>

        @if (isLoggedIn)
        {

            <NavLink class="nav-link" href="/projects">
                <span class="oi oi-list-rich" aria-hidden="true" @onclick="Logout"></span> Logout
            </NavLink>
        }
    
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool isLoggedIn = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = await AuthService.IsLoggedInAsync();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        isLoggedIn = false;
        Navigation.NavigateTo("/");
    }
}
